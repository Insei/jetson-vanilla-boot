#!/bin/bash
#########################################################
SCRIPT_HOME="$PWD"
TEGRA_PLATFORM=$1 # 210 or 186
BSP_VERSION=32.5.0
BSP_VERSION_ARR=(); while IFS=$'\n' read -r line; do BSP_VERSION_ARR+=("$line"); done < <(echo $BSP_VERSION | tr "." "\n")
####################### TEGRA BSP #######################
NVIDIA_BSP_DIR=$SCRIPT_HOME/BSP
NVIDIA_BSP_PLATFORM_DIR="$NVIDIA_BSP_DIR/t$TEGRA_PLATFORM"
NVIDIA_BSP_L4T_DIR=$NVIDIA_BSP_PLATFORM_DIR/Linux_for_Tegra
######################### T210 ##########################
NVIDIA_BSP_PACKAGE="Tegra${TEGRA_PLATFORM}_Linux_R${BSP_VERSION}_aarch64.tbz2"
NVIDIA_BSP_LINK="https://developer.download.nvidia.com/embedded/L4T/r${BSP_VERSION_ARR[0]}_Release_v${BSP_VERSION_ARR[1]}.${BSP_VERSION_ARR[2]}/T${TEGRA_PLATFORM}/${NVIDIA_BSP_PACKAGE}"
##################### TEGRA BSP END #####################

function cleanup() {
  set +e
  rm -rf "$NVIDIA_BSP_PACKAGE"
}
trap cleanup EXIT

function prepare_bsp() {
  mkdir -p "$NVIDIA_BSP_PLATFORM_DIR"
  wget "$NVIDIA_BSP_LINK" -O "$NVIDIA_BSP_PACKAGE"
  tar xpf "$NVIDIA_BSP_PACKAGE" -C "$NVIDIA_BSP_PLATFORM_DIR"
}

function apply_bsp_patches() {
  cd "$NVIDIA_BSP_L4T_DIR" || return
  for patch in "$NVIDIA_BSP_PLATFORM_DIR"/patches/*.patch; do
    echo "Applying $patch"
    patch -p1 < "$patch"
  done
  cd "$SCRIPT_HOME" || return
}

prepare_bsp
apply_bsp_patches

exit 0

# function make_parts() {
#   if [ "$BOARD" == "jetson-nano-b" ]; then
#     # replace nvidia jetson-nano-b u-boot.bin binary to new version.
#     cp "$NVIDIA_BSP_PLATFORM_DIR/$BOARD/u-boot.bin" "$NVIDIA_BSP_PLATFORM_DIR/bootloader/t210ref/p3450-0000/u-boot.bin"
#     cp "$NVIDIA_BSP_PLATFORM_DIR/$BOARD/tegra210-p3450-0000.dtb" "$NVIDIA_BSP_PLATFORM_DIR/kernel/dtb/tegra210-p3448-0000-p3449-0000-b00.dtb"
#     cd "$NVIDIA_BSP_PLATFORM_DIR" || return
#     BOARDID=3448 BOARDSKU='' FAB=300 ./flash.sh --no-root-check --no-systemimg --sign jetson-nano-qspi mmcblk0p1
#     cd "$SCRIPT_HOME" || return
#   fi
# }

# make_parts